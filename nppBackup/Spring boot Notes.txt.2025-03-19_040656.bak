Spring Boot

		PROJECT STRUCTURE
			
			1.src/main/java--> 
				-Sourse code of the project
				
			2.src/main/resources-->
				-Properties or configue file of the project
				
			3.src/main/resources.application.properties-->
				-whatever we want to add in project we have to give it value how it works
				-like connections,servers whetever
			
		Annotations:
			
			-It says that following code has the work which is mentioned as annotation
				
				@SpringBootApplication
						-->It is to tell main function that it will run as spring boot application
						-->It works as 3 different annotations
							1.@EnableAutoConfigurations -> To enable all configurations
							2.@Configuration			-> To register extra beans or import configurations
							3.@ComponentScan 			-> It scan conponent present in the IOC and assign where it requited in whole project
			
				@RestController 
						--> For making Rest Apis (GetMapping,PostMapping,PutMappting,DeleteMapping).
						--> @RequestBody
						
				@value
						--> To assign values to the variable from application.properties file.
				
				@Components("Name{optinal}")
						--> It shows the following class is behaving like a Component of the project and as it annotated by same.
						--> It marks the class as a Spring Bean so @Autowired can get its object/Bean from the IOC to use it.
						--> It makes bean/object available for the dependancy injection.
						
				@Autowired
						-->To ask IOC for a object without explicitly creating it.
							Example : 
								@Autowired
								private Students student;
						
				
				@Qualifire
						-->Lets suppose there are a lot of classes impolemented by a same inteface and you are injecting by interface object type
							then it will be having ambiguity in it which class to choose so we have to write @Qualifire("Name{optinal}") under @Autowired
				
				
				@Lazy
						-->Lazy Intialization
							--To make class lazly initialize when it need instead at first it innitialized after starting spring project
				
							instead of all this to add all classes as Lazy we can add it in applications.properties as 
								spring.main.lazy-initialization=true
						
				
				@PostConstruct
						--> To make sure at start of the work something has to do at end we do with this
						
						@PostConstruct
						public void doMyStuffs(){
							// do our work
						}
				
				@PreDestroy
						--> To make sure at end of the work something has to do at end we do with this
						
						@PreDestroy
						public void doMyStuffs(){
							// do our work
						}
				
				@Configuration
						--> To tell that class has @Bean in it
						--> we use to configure things mostly like getting External class and with @Bean we can make entry inside IOC
						--> for configuring the thing properly 
				
				@Bean
						--> Make an third party class available to spring framework
		
				
				
				@Entity
						--> To make class map to database table
						
				@Table(name=name) {optional}
						--> To give name to the table in database
						
				
				@Id
						--> To make field/column as a primary key
				
				@Column(name=name) {optional}
						--> To name coloumn as we wantend
						
				@Profile("environmentName"):
					-Class level Annotation
					-Whenever the {"environmentName"} is active only the particular bean get active
				
				@GenerateValue(strategy=strategy_name)
						--> works as AUTO_INCREMENT of data table
						
						Types of strategies:
							1.GenerationType.IDENTITY -> for Primary Key
							2.GenerationType.AUTO     -> pick strategy automatically
							3.GenerationType.SEQUENCE -> generate values in sequece
							4.GenerationType.TABLE    -> generate primary key's as per tables uniqueness
							5.GenerationType.UUID     -> generate primary key's as universal unique Ids
							
						-->We can de own custom generation properties
							by overriding the method from org.hibernate.id.identifire
							and override the method public serializable generator(){}
				
				@Transactional
						-->To make sure that all transactions done whetever started if any problem occurs in between 
								it make rollback all transaction
						
						-->It works in ACID Properties
						-->Methods and also class can be transactional
						-->By default it roll back for  unchecked exception (i.e. RuntimeException or Error)
						--> We can use @Transactional(rollbackFor = SQLException.class) to make for others
							Transaction Propagation:
								-It tells if one method which is @Transactional calling other @Transactional method then how should it behave
								
								1.REQUIRED: If thereâ€™s an existing transaction, it will be used. If none exists, a new one will be started (default behavior).
								2.REQUIRES_NEW: Always starts a new transaction, suspending any existing one.
								3.SUPPORTS: If a transaction exists, it will participate in it; otherwise, it will execute without a transaction.
								4.NOT_SUPPORTED: Executes without a transaction, suspending any existing one.
								5.MANDATORY: Requires an existing transaction to be present; otherwise, an exception is thrown.
								6.NEVER: Executes without a transaction; if a transaction exists, it throws an exception.
								7.NESTED: If a transaction exists, it will create a nested transaction.
							
							Isolation Levels:
								
				
				@Repository
						-->To work with the database / persistant layer
						-->Sub part of @Component
						-->Do all works related database like JDBC,translate JDBC exceptions and none other than component scanning
						
						
				
				@ExceptionaHandler:
						-->To handle the exceptions
						-->
				
				@Service:
						-A service layer is a layer between controller and DAO
						-It is for intemidiate logic
						-Facade design pattern
						
				
				@Async:
						to perform async task on something
						
				@ExceptionHandle(ExceptionName/Custom Exception):
						To handle exceptions
					
				@ControllerAdvice:
						Similar to the filter / interceptors
						Pre-Process request to controllers
						Post-Process responses to handle
				
				@Schedule(crons="sec min hour DD MM day"):
						To schedule the jobs 
				
				@Resilience4J : for circuit break
				
				@DynamicPropertySource: To give values dynamically
						
				
				@Document(collection = "users") :--> For NoSQL databases like mongoDB
				
				@ConfuguartionProperties(prefix of properties from application.properties):
					Hepls to make manual configuration to springboot
					-We can use @Bean to use third part manual configuration
					-We can change configured properties of bean / prefix of we are using in applications.properties
				
				@Transient :
					Not to save the value in database
					
				
				@RequiredArgsConstructor:
					Instead of the Autowired we use this Annotation
						
				
				@TimeLimiter(name:"name of timeout app"):
						For circuitebreaker if other service is slow we can assign timeout
						
				@Retry(name="name retry class"):
						if there is issue with microservices when to retry after how much tries and what is wait duration mean after how time do retries
				
				
				@JsonIgnore
					To ignore the field from getting into JSON as a property in spring boot
					
				@JsonAnySetter with a Map:
					in spring boot there are predefined POJO for request body JSON wich convert JSON into java object using jackson
					but when new feild comes in the JSON and we want to handle we can use this annotation so we directly map it to the MAP so we can use it
					
				
				@ConditionalOnProperty:
					Allow bean should enable or desable or create or not is  not present
				
				
				@Valid:
					Checks validation of entity fields like @NotNull,@Size,... there given before @RequestBody we use to apply on that input
					
		Maven:
			
			-Maven is project management tool
			-It is used to build managment and add required dependancies for the project
			
				1.devtools ---> auto rerun project  (for this set up in preferances and advance settings of the intelij too)
				
			-We add dependancy
			-Download JAR files which are required
			
			POM->Project order model .xml file
			
				Structure :
					-Project metadate : Name of project,version,and output file type like JAR WAR
				
				Dependancies:
					-Required things/Modules/Frameworks for proejcts
				
				Plug ins:
					Additional Custom task to run like generate JUNIT testa and report
				
				
				
					
		Actuator:
			-To monitor and manage the application
			-To check application health
			-To access aplication matrics
			-To access aplication tcpDumps
			-Adding dependancy automatically itegrate  it by using /actuator
				for this we have to integrate by going into application.properties
		
		
		
		Security:
			-It secures all Rest API endpoints automatically by using username and password
			-It generates the password and give us but also we can add our own password in application.properties
			-We can exclude the endpoint by allowing the security by , seperated endpoint names from application.properties
			-SecurityFilterChain is used for that HttpSecurity http configurer.
			-WebSecurityConfigurerAdapter
			
			    @Bean
				public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
					http.authorizeHttpRequests(configurer->
							configurer
									.requestMatchers(HttpMethod.GET,"/employees/").hasRole("EMPLOYEE")
									.requestMatchers(HttpMethod.GET,"/employees/{id}").hasRole("ADMIN")
							);
					//using basic Authentication
					http.httpBasic(Customizer.withDefaults());
					//disable CSRF
					//Not required for POST,DELETE,PUT,PATCH ...
					http.csrf(csrf->csrf.disable());
					return http.build();
				}
			
		
		Inversion of control (IOC):
			-Manages the objects or else it creates the object of the classes define in project if and only if we used annotation on it.
			-It creates the objects using object factory automatically so it can create the object of asked class when required.
			-We do not need to explicitly create the object of the class every time it will created by the spring itself using IOC.
			-It helps to archeive dependancy injections during development
			-@Autowired --> Annotation is required for archeiving same
			
		Dependancy Injections:
			-When a class is dependandant upon another class,In this scenario we need dependancy to inject in it.
			-In spring boot it is done by the IOC container by 
		
		Types of Injections:
			1.Contructor Injections:
				-It is being used when we have required dependancies
				-Work behind the scenes
					-->it will create the object of class as well as controller with the given vale in it and assigns it
				
				-Example of Contructor Injection is:->
						
						@RestController
						public class RestApi {

							private Students student;

							@Autowired
							public RestApi(Students student){
								this.student=student;
							}
							@GetMapping("/")
							public String getValue(){
								return this.student.name();
							}
						}	
			
			2.Setter Injections:
				-It is being used when we have optional dependancies
				
				-Example of Contructor Injection is:->
				
						@RestController
						public class RestApi {

							private Students student;

							@Autowired
							public void setStudent(Students student){
								this.student=student;
							}
							@GetMapping("/")
							public String getValue(){
								return this.student.name();
							}
						}	
			
			3.Field Injections:
				-Just put @Autowired on field and that its.
				-No longer recomended (as coding standerds/Spring documentation) as it is hard for test the code with this
			
				-Example of Contructor Injection is:->
				
						@Autowired
						private Students student;
		
		Beans Scope:
	
			-By default the scope of bean is singleton
				-Means only one instance of bean is created
				-Stores in cached memory
				-All dependacy injections for a bean will refer same bean
			
			-We can make bean scope more than single by explicitly assign it using
				@Scope(ConfugurableBeanFactory.SCOPE_SINGLETONE)
			
			Types of scopes:
				1.Singleton   -> only one bean will be created
				2.Prototype   -> New bean will be created for every injection
				3.Request     -> Scoped to an HTTP Web request (only for web apps)
				4.Session     -> Scoped to an HTTP Session (only for web apps)
				5.Application -> Scoped at web app ServletContext (only for web apps)
				5.WebSocket   -> Scoped at web socket (only for web apps)
		
		Bean Life Cycle Methods --Annotations	
			
				Container Started -> Bean instantiated -> Dependacies injected  |>
					-> Internal Spring Processing --> Custome Init method(Optional) |>
					-> Bean ready to use --> Container Shut Down -->Custome Destroy(Optional) |>
					->Stop
				
				--it is used to add / calling custom logic methods
				-- Cleaning the things that want to stop after finishing work
		
		
				
		Hibernate:
				-It is ORM (Object Relational Mapper) to store java object into database
				-It handles low level JDBC
		
		JPA:
				-JAKARTA/JAVA PERSISTANCE API
				-Standerd API for ORM
				-It uses the JDBC to work with DB
		
		
		JDBC:
				-Java database connection
		
			

Terminologies:
		Entity Class:
				-Class should be annoteted by @Entity
				-We can say class as table of database
				-A Java class mapped to a database table
				-Class must have no argument constructor
				-Constructor should be public or protected


		
		DAO:
				-DATA ACCESS OBJECT
				-Helps to interacting with database
				-There are a lot methods to do various tasks like save(),find(),update(),delete()... etc
		
		EntityManager:
				-Helps to interact with database
				-Provides functions to do so
				-low level hold and flexible and better than JpaRepository or CrudRepository
				-it is nothing but to perform various things on the database it is like DAO provide by  JPA
				
				syntax :
					EntityManager.method_name();
				
				methods in EntityManager:
					1.persist()-->To save the things
				
				Query by using entity manager
					- for querying should give entity name(Class Name) and entity fields (Class Fields)
				 
				
		
		JPA Repositories:
				-Helps to interact with database
				-Provides functions to do so
				-High level abstraction
				-Can write customer queries using @Query()
		
		Advance JPA:
				-To get related data tables
				
				Relationships:
				-one to one
					---> One table joins one table
					---> Cascade Types:
						-if
				-one to many---> one table joins to many tables
				-many to one
				-many to many

Connecting more than one database:
	-We have to give name to each connection string in application.properties
	-As it is not general so we have to manually configure it for project
	
	- we have to create the entityManager for each and give path of entities for that manaer as a package so inside package all this related to the entity
	- also name the bean as entityManager as it is only valid so only it will be known to Springboot
		syntax:
			@ConfigurationProperties("spring.datasource.mysql")
			@Bean
			public DataSourceProperties mySqlDataSourceProperties(){
				return new DataSourceProperties();
			}

			@Bean
			public DataSource mySqlDataSource(){
				// this is one way to do also just return DataSourceProperties() class it also works
		//        DriverManagerDataSource dataSource=new DriverManagerDataSource();
		//        dataSource.setUsername(mySqlDataSourceProperties().getUsername());
		//        dataSource.setPassword(mySqlDataSourceProperties().getPassword());
		//        dataSource.setUrl(mySqlDataSourceProperties().getUrl());
		//        dataSource.setDriverClassName(mySqlDataSourceProperties().getDriverClassName());
		//        return dataSource;
				return mySqlDataSourceProperties().initializeDataSourceBuilder().build();
Logging:
	logback.xml(not compulsn)
	we have to create logback.xml in resources to custumize the logs
	
	TRACE
	DEBUG
	INFO
	WARN
	ERROR
	
	we use @Slf4J
	
	we use Logger instance for the same
	
	private Logger logger= LoggerFactory.getLogger(StudentManagmentService.class);

At production level we can use ELK stack (Elasticsearch, Logstash, Kibana), for real time tracking

Spring security With JWT:
	JWT is way to securly transmit information parties as a JSON objcet
	-URL safe token that carries info between parties
	-A String consists 3 parts seperated by  . and has header,payload,signature
	
	Header: Consists of two parts algorithm ex. HS256 or RSA used for encoding and type of token ex. JWT
	Payload: Actual Data 
	Signature: encoded string concatination of encoded header with base64enc+ . + encoded Payload with base64enc and sign concatination pass secret key
	
	advantage :
		Hard to decode
		Can set expiry so cant be hacked or stolen by middel man
		Can send data also securely
	
	
	Now:
		It checks password and username by using authenticatManager:
			If it is authenticated:
				1.we generate token and pass it
				we pass claims,subject,header,and issued timeDate expiry date,signWith(secret key) and compact it
				claims is the thing if we want to add something in the more in payload like body other than username
				
				2.we use Jwts.builder() to generate token
				
				it by Default usage SHA256 algo
				
				we can use JwtFilter extends with OncePerRequesrFilter
				
				We chack is the 
				and all other things for role based auth same as basic one and then instead of basic we can run JWT auth before that
			If not then we Return that wrong user
		 
	
For advance mapping we have to map it accordingly:
	if one table is joining another we have to make type of that table inside the table 
	if more than on we have to use list for it thats it nothing much

ResponseEntity<Object>:
	Return data in json/XML/HTML from RestAPI 
	Format:
	ResponseEntity.ok() to send custom things

Optional<Class>:
	A object either hold value or not like it might hold null value so have to check exception for NullPointerException
	We can take advantage of the methods like isPresent(), ifPresent(), orElse() to work with it

GlobalExceptionHandler:
		Real time AOP it is controller advice
		So default exceptions come to the Controller advice and we make logic on that
		We have to create custome Exception handler classess for this
			
			1.Make a custom exception and send msg to super
			2.Add custom exception in global exception
			3.Throw the Custom exception where-ever needed by creating new object of custom exception

mostly we work we objcets so each row is like object and we perform operation on that 
				
OneToOne mapping:
		-One row is connect to the another row and all are unique
		Syntax:
			table name (Class name)
			@OneToOne(cascade=type/{Types})
			@JoinColumn(name="instructor_detail_id")
					-->name is the column name in current table/class and is auto configues to foreign key of table/class
					
			@OneToOne(cascade=type/{Types})
			@JoinColumn(name="instructor_detail_id")
			private class class_variable;
		
mappedBy:
		property in the class where we given annotation
		-mapping to the related column so no 2 foreign key made only one table holds the foreign key of others

One TO Many:
		-One row is connected to the many rows in another table
		-No cascade delete
		-we have to write function to handle this particularly
		
		we use @JsonBackReference for single and @JsonManagedReference for list so it wont give us recursive answer

fetch types:
	used to make this fast or slow
	Eger vs Lazy
		Eger retrive whole at a times
		Lazy will load as per requirement
	 
		
		

JPQL:
		we can write queries here for the application
		typedQuery is the type where we can write query as well as give the parameter 
			using :variable
			and set parameter for particular query
		
		format=entityManager.createQuery(query,ClassName)
		




Data binding:
		--> Convert data from json to java POJO
		--> Spring use jackson for data binding of json
		--> 
		
DEVELOPMENT THINGS


	BINDING VARIABLES:
		
		@PathVariables:
				To get values from the path(Variable values)
		
		
		@RequestParam:
		
		@RequestBody:
			as we are getting values from requesr body so we can use this
		

Exception Handling:
			
		It extends by RunTimeException and cunstructor calls to the super class
		@ControllerAdvice @RestControllerAdvice @ExceptionaHandler

Rest API Design:
	Stateless
	Versioning
	Idempotency
	
	
			
	
Pageble:
	-TO convert data into pages based on Offset Size , no of pages and Sort.by(Sort.order.asc("field name"))
	-It has Pageble.of() to create the pagable object
	-It is only used in PaginationRepository

Data Repository

	instead of making DAO we can use this one to access data from DB
	

Spring Security:
		-To secure the endpoints we use it
		-Filters are used to do so
		-We can configure in confuguration 
		-We can use Inmemory to do it also we can use database
		-It is done by Servlet filters
		-It authories access  too
		
		We can use In memory or Custom / password storage
		
		for Inmemory we can use InmemoryUserDeatils class
		
		for restriction access we can use requestMatcher:
		
			HttpSecurity http
			
				requestMatcher(Method,URL).hasRole("Given_Role")
				requestMatcher(Method,URL).hasAnyRole("List_Of_Roles")
				the authenticated user is handle by Spring boot it self
			
		
			For this we have to use SecurityFilterChain class to do it
			
			we have http.authorizeHttpRequesr(configure->confugure.requestMatcher().hasRole())
			
			http.httpBasic(customerizer.withDefaults());
			return http.build()
		
		As we configure roles for user SPRING BOOT takes care of all this by it self
		
		CSRF --> CROSS SITE REQUESR FORGERY
		
		JDBC AUTO:
			It is help with web forms to process tokes from HTML forms
			-Used for any normal web request

			For data base store if we follow Spring security Schema then springbbot does its own work it self
				
				Schema is
					User 							Authority (Same as role)
					-username varchar(50)			-username varchar(50)
					-password varchar(50)			-authority varchar(50)
					-enables TINYINT(1)
					-enables TINYINT(1)
			
			We just have to use JdbcUserDetailsManager()
		
		
		if we use custome table for this we have to write JDBC code for that then

Spring cloud:
	It is also a project we can use some cloud tool which are required in development
	

Connecting multiple Databases in spring:

Service Discovery/Service Registry:

	We can map services with name and ip address so helpful for the service to interact with each other
	We can use Eureka
	we have to give properties in wureka server as well as
		spring.application.name=discoveryServer
		server.port=8761
		eureka.instace.hostname=localhost
		eureka.client.register-with-eureka=false // not to register itself 
		eureka.client.fetch-registry=false
    As well as @EnableEurekaClient for all the main classess which we want to register
	also we have to give Eureka url in the services
	
	for the Eureka service we have to add dependancy for server and which microservices we want to add to the eureka we have to use eureka-client
	
	In application.properties we have to give eureka server properties
	and in microservices we have to mention eureka server path :
	
	eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
	
	
	
	
	
API GATEWAY:
	RouteLocator type class
	RouteLocatorBuilder builder
	builder.build().routes().route(r->r.path())
	
	We call API gatewate and ask it to do its work
	
	there are two methods to do so:
		1.Directly give service id,uri and prdicate[0] (Paths) in application ID or 
		2/Create config class wich return RouteLocator and just using its builder we can use it
	

		
Join fetch:
		Join + Fetch
		

REST TEMPLATE:
	Configure it then use 
	exchange()
	
	return restTemplate.exchange(url, HttpMethod.GET,null{RequestEntity}, Object.class{ResponseType});--> For synchonous
	return AsyncRestTemplate.exchange(url, HttpMethod.GET,null{RequestEntity}, Object.class{ResponseType}); --> for Async

AOP : Aspect of programming
	
	-Code reuse and Easy to change
	-Reduce complexity
	
	Usecases:
		Logging,security transactions
		Audit logging
		Exception Handling
		API management 
		analytics also
	
	Teminology
	
		Aspect: module of code for a cross Cutting concerns (logging,Security..)
		
		Advice: What action is taken and when it should be applied

		Join Points: When to apply code during program execution
		
		Pointcut:A predicate expression for where advice should be applied
		
	@Aspect : to get the AOP things are beign used
	
	
	Advice Types:
		@BeforeAdvice:
			before request hitting target object we have the custom code run before target runs
			Use cases:
				-logging ,security or transactions.
				-Audit logging
				-API manager
	
	
	
	-In short we have to write a method and with @Before we have to tell before that advice run following method
	
		
		@AfterAdvice:Run the code after method finishes same like finally in try catch block
		
		@AfterReturning:Run the code after the method successful(success execution)
		
		@AfterThrowing: run after method if exception thrown
		
		@Around:Run code before and after the method
	
	Weaving:
		-Connecting aspect to target object to create advice object
		-Run Time weaving is slowest
		
	
	Spring AOP:
		-Only supports Method level join points
		-Run-time code weaving is slower than AspectJ
		
		
	AspectJ:
		all type join points:Method level,Constructor,Field level
		weaving:compile time,post compile time and load time
		
		Types:
			Compile time
			load timr or run time
			
	
	Pointcut:
		
		Pointcut expression Language:
			execution(modifier-pattern? return-type-pattern declaring-type-pattern?
					  method-name-patten(parameter-pattern) throw-pattern?)
		
			? -> Means optional
		
		example:
			    For specif path wise:
				
					@Before("execution(public String com.prac.prac.controller.StudentController.getname())")
				As we didnt metion path it will rin for any with same things
					@Before("execution(public String getname())")
		Matching on method name:
	
	Pointcut declaration:
		Resuse the pointcut expression
		If we want to apple to multiple advices
		
		declare point cut and use it
		@Pointcut("execute(experession)")
		privare void methodName(){}
		
		for advice use the method name there like
		@Befre("methodName()")
		
	
	Combine the pointcuts:
		Apply same advice for multiple locations
			we can use And (&&) Or (||) Not(!)
	
	Order of the advices:
		we can use @Order(num) annotation
		We have to convert aspects in differnt modules/classes and give @Order(num)on it
	
	
	Reading the arguments
		We use JoinPoints: it gives info about method that is executing
		has get signature method helps us to give method signature

NOTES : Can use "*" to expose all endpoints
		Can use "," to expose one by one endpoints with endpoint name
			
			
		

For making code of block Async we can use:
		CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {code block});
		future.get() --> To get result.
		
Circuit Braker:
	Close: 		All this working
	Open: 		Not working fine
	Half-Open: 	
	Threashold : No of times should try to request the service if wont in the threashold then circuit become one
	after time frame it goes to half-one
	
	we mostly use resilience4j for that which helps to make circuit breaker in synchonous communication
	
	Circuit breaker should be added on (Caller) the API who is calling the failing service
	 as circuit breaker protects the caller to call failing services
	
	For adding circuite breaker we have to add properties in applicatiomn.properties of Resilience4J and
	on the method whom we want to avoid call failing API should be annoteted by the @CircuitBreaker(name="Name of the circuiteBreaker",fallback="name of FallbackMethod")
	
	We have to write fallback method so it can be useful to tell users what is problem so it will be execute if there any failure should be same return type of same as original method where we are adding circuit breaker
	as well same signature of the original method and also RuntimeException so we can give exception
	
	If there any slow network for the other service which is calling by caller so we can use timeout for that.
	if wont response then it will be terminated we have to add timeout in .properties file
	and use @TimeLimiter(name:"name of timeout app") to 
	
	with this we have to change the caller method reture type to CompletableFuture<type> as it become async call
	
	when ever slow response or no response we have to retry call
	 for that we have add properties and give a retry time and max time
	 
	 we have to use @Retry(name="name retry class") 



Distrubuted tracing:
	there are a lot of logs on production level so it is hard to use logs for check performance.
	
	it helps to trace request from start to finish so we can easily track things
	
	so if request failed at any time we can easily know why it failed and where it failed
	
	To implementing distrubuted tracing:
	
	In distrubuted tracing we have trace id and spanId (no of trip request taken inside the system)
	
	we can also understand is service slow or not or has any performance issues
	
	we use spring cloud sleuth and zipkin to visualize the distrubuted tracing info 

	we have toadd zipkin properties and download zipkin in system
	
	we also create own spanIds using Tracer we can use Tracer().nextSpan().name("name ofspan")
	
	also tracer.withSpan(nameofspanname.start())--> It will put all this after this in same span and also we stop itegrate
	
	nameOfSpan.end()
	
SecurityContextHolder--> helps to store the information about the useds security
My my own knowledge

1.Controller -> Accesing data using entity manager
2.Controller -> DAO(data access layer) -> Accesing data
3.Controller -> service -> DAO -> Accesing data
