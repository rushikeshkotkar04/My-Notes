						LIST
Array List:
	--size(),get(),set(),sort(),contains(),clear()

Linked List:
	--size(),get(),set(),sort(),contains(),clear(),first(),last();
	--Same as Linkedlist but its is doubly one

Vector:
	--Same as Array list but it is synchronized
	--size(),get(),set(),sort(),isEmpty(),contains(),clear()
	

Stack:
	-syncronized (can use LinkedList instead of stack)
	-push(),peek(),pop(),capacity()
	

Immutable things:

List<String> immutableList = Collections.unmodifiableList(mutableList);
		--To make list unmodifidable 
		--only get operation there
	
unmodifiableMap
unmodifiableSet


	


						MAPS

HashMap:- 
		--put(),get(),remove(),containsKey(),containsValue(),getOrDefault(),putIfAbsent(),firstKey(),lastKey(),keySet(); //O(1)
		-key:value pair
		-ordered get changed
		-not synchronized

LinkedHashmap:-
		-it maintains the ordered	
		-put(),get(),remove(),containsKey(),containsValue(),getOrDefault(),putIfAbsent(),keySet() //O(1)
		-doubly linkedlist
		-we can change the order for inserting also
		-it works on LRU cache

WeakHashMap:
		-After work the un used and non strong refer get cleared automatically

identityHashMap:
		-it works on objects hashcode
		-it only works for objects

SortedMap:
		-It is inteface and TreeMap is its implementation

TreeMap:
		-It stores key:values as sorted by keys
		-it takes comparator
		put(),get(),remove(),containsKey(),containsValue(),getOrDefault(),putIfAbsent(),firstKey(),lastKey(),
		headMap(),tailMap()

NavigableMap:
		-It is inteface and TreeMap is its implementation
		-it provides navigation

ConcurrentHashMap:
		-it archeive concurrency
		-it has own locking when resize or collision
		-for read no locking unless write operation is going on
		-compare and swap values

ConcurrentSkipListMap:
			thread safe TreeMap
			Based on SkipList
			-Concurrent map+ sorted by keys
			-for multithreaded environment

ENumMap:
			-if keys are from enum the you can use it

ImmutableMap:
			-content cant be changed(CRUD)
			

Set:
		add(),get(),remove(),containsKey(),containsValue(),getOrDefault(),putIfAbsent()
		-no duplicate elements
		-find insert tc is O(1)
	
TreeSet:
		Sorted set has 
		add() remove() first() last() contains

SynchornizedMap
		--To make whole map/set synchronized

Queue:
		Implemented by Linkedlist
		add(),remove(),size(),poll()
		

PriorityQueue:
		-sorted queue in order	
		-can use comparator
		-By default min heap
		add(),isEmpty(),size(),offer(),poll(),peek(),isEmpty();

Deque:
		insertion and deletion by both end
		ArrayDeque()

BlockingQueue:
		-Thread safe queue / wait for queue to make space or wait to get into it
		put(),take(),offer()
		



HashTable:
		-it implements maps
		-synchronized
		-legacy class
		-replaced by concurrenthashmap	



-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------


Memory managemnet:
	There are two types of memory
		1.Stack
		2.Heap
	
	-JVM responsible to manage memory in java
	
	Stack:->
		-Stack stores temporory variables and seperate memory block for methods
		-Stores primitive data types
		-Stores reference of Heap object
			Strong reference
			Weak reference
				Soft reference
		-Follows LIFO order
		-If stack memory goes full it gives stack overflow error
		-Each thread has its own stack memory but all thread stores in common heap memory
	
	Heap:
		-There no order in heap for created memory 
		-Garbage collector responsible to clear objects which are not referred
		-GC runs periodically and JVM is responsible for that
		-Heap Momory:
			Devided into two parts:
				1.Young generation:
					Types:
						-Eden: When we create new object of a class it goes in Eden
						-S0- Servivor space:After GC run all object which has refference will sweep from Eden to s0 and there ages increase by 1
						-S1- Servivor space:After GC run all object which has refference will sweep from Eden to s1 and there ages increase by 1
					In young generation major GC work
				2.Old Generation/Tenuer:
					-After the GC runs any object in S1 and has referrence then it will be moved from s1 to Old Generation
					-In Old generation Minor GC work
					-Object move to Old generation when its age reach to threashhold
				
	-Meta Space:
		It stores the class variables (static variables),Class meta data ,It stores Constants
	
	
	Garbage Collector algorithms:
		1.Mark and sweep algo: Mark the obj which are non referrence and sweep objects to next level
		2.Mark and sweep with compact space: Make objects space seuuential so we can use most of it
	
		Version of GC:
			-Serial : only 1 thread is used to freedup the space in each generations (slow,VV expensive) ,Here GC threads stops when application thread works
			-Parallel :(Default Version in java 8): Depending on core that many threads of GC works at a time so it is faster Here GC threads stops when application thread works
			-Concurrent mark and sweep: While applicationn threads working concurrently GC threads also working no one stop Here GC threads stops when application thread works(Not 100% Guaranteed) compaction can not happen
			-G1 GC: Bettern version Concurrent mark and sweep (Try to give 100%),And compaction happen
	
	Type Referrences:
		Strong referrence: Same as we use 
		Weak referrence: Same as we use using WeakReferrence<T> var=new WeakReferrence<T> (new T())
						-As soon as GC runs it free the object like delete the Obj memory
						-you can use it until garbage collector runs
		Soft referrance: Type of weak 
							It can be deleted by the GC as soon as it run but only if it urgent or required
							
	

	
	


		
			
							
Iterable : Interface
			Has Functionality of forEach loop
			it has methods
			.hasNext(),
			.remove(),
			.next(),

Iterator:
		-To traverse any collections
		Syntax 
		Iterator<Integer>=list.iterator();
		.hasNext(),
		.remove(),
		.next(),

ListIterator:
		We can replace current element also
		
	
Functional interface:
		A interface where only one abstract method present
		Lambda experssion is one of them
		
		interface MathOpeartions {
			int operation(int a, int b);
		}

lambda expression:
		An Anonymous function 
		()->{logic}
		-We have to write a interface if not present;
		for this we need a functional interface with only one method
			
		interface MathOpeartions {
			int operation(int a, int b);
		}
		
		use of lambda expression:
			
			@FunctionalInterface
			interface MathOpeartions {
				int operation(int a, int b);
			}
			
			MathOpeartions add = (a, b) -> {
				return a + b;
			};
			System.out.println(add.operation(1, 2));
			
		
predicates:
		To check anything
		functional interface
		A interface has only function with return type boolean
		and yakes only one parameter
		
		Syntax:
			Predicate<Integer> isEven = (x) -> {
				return x % 2 == 0;
			};
			predicate1.test(anotherFunctionalinterfaceREsults) --> To test things
		
		we can use and or 
			predicate1.and(predicate2)
			predicate1.or(predicate2)

Functions:
		A functional Interface which return anything and take parameters too
		
		Syntax:
			Function<Integer, Integer> doubleIt = (x) -> x * 2;
			Function<Integer, Integer> tripleIt = (x) -> x * 3;
			doubleIt.apply(2);
			doubleIt.andThen(tripleIt).apply(2);
			doubleIt.compose(tripleIt).apply(2);// firest appli inside () then before .
			System.out.println(doubleIt.andThen(tripleIt).apply(2));
		
		Give same output;
		        Function<Integer,Integer> identity=Function.identity();

Consumer:
		-It returns void and takes input
		-Mostly used for printing something
		Syntax:
			Consumer<Integer> print = (a) -> System.out.println(a);
			Consumer<Integer> print1 = (a) -> System.out.println(a);
			print.accept(5);
			print.andThen(print1);// first consumer then other too
Supplier:
		It doent take any parameter but return anything
		Syntax:
			Supplier<Integer> supply = () -> 1;
			System.out.println(supply.get());

// It also has BiPredicate, BiConsumer,BiFunction it takes two parameter	
// UnaryOperator --> Same as function just take only one type

Method referrance:
		Can use method without invoking we use it instead of lambda expression
		:: --> Method referrance
		system.out::println
		
		className::new --> Constructor Refferrance
Streams:
		Can process any collections to stream in a functional and declarative method
		Simplify the data processing
		Embrace Functional Programming
		Without multithreading we can use parallism
		
		source -> operations and then terminal operation
		
		how to create Stream:
			1. collections.stream()
			2. Arrays.stream(arrName)
			3. Stream.of(values)
			4. Stream.generate(Supplier<T>) --> infinite Stream
			5. Stream.iterate(seed:(Starting point),UnaryOperator<T>)
		
		Intermeddiate operatorations: Convert Stream into other Stream
			.filter(Predicate<T>) --> To filter based on contion
			.map(Function<T>)     --> To give input and retrun Output
			.sorted({comparator}) --> To get stream sorted
			.distinct()           --> To get all unique element in stream
			.limit(n)             --> To limit the element in the Stream
			.skip(n)              --> To skip first n elemnets
			.flatMap(List::stream)--> To flat if list inside list
			.groupingBy()         --> to group streams item based on condition
			.partitioningBy ()    --> Partitian stream based on condition into two groups (predicate)
			
			
		Terminal operation:
			Untill we dont use terminal operation intermediate operations
			.collect(Collectors.tocollection())
			.forEach(Consumer<T>);
			.reduce(BiFunction)    --> combine to give single result
			.count()
			.anyMatch(Predicate<T>)
			.allMatch(Predicate<T>)
			.noneMatch(Predicate<T>)
			.findFirst() --> to get first
			.findAny()  --> Get Any element
			
		list.parallelStream(),intermediate operartion.terminal operartion
			prallelStream do operartion parallely so it reduces time 
			it helps to work on multiple threads at a time
			
Garbage collection:
		To make memory by removing the garbage after we make variable null

WeakReference<TYPE> var=new WeakReference(new object);-- we do not need to make null GC directly clear it



	
	


MultiThreading:
		multiple process can run at a time
		import java.lang.*;
		you can extend thread class or else extend runnable interface or callable interface
	
	
		start(),join(),setPriority(),setDeman(),sleep(),
		Runnable,Terminated,Sleeping,blocked....
		

Synchronization:
		if any single thread is used by many resources at a time,
		it might affet the final outcome so we use it so at one time only one 
		thread can access shared resourse s
		
Types of it
	intrensic:
		no control over
		until one colmplte others cant enter
		synchronized: method,block of code
	
	explicit (locks):
		controlled
		we can give specific type for particular time
		reentrantLock() most imp 
			
OOPS:
	 Static things in java class stores in Method Area of JVM
	 
	 Access Modifier:
		Default : Anywhere in same package
		
		public : Anywhere either same package or diffent one in same project
		
		protected : same class child class and package can be diff if class is extended
		
		private : in same class only
		
	

Core Java:
		
File I/O:
	
	File file=new File("name.txt")
	BufferedReader reader=new BufferedReader(new FileReader(file));
	Bufferedwritter reader=new Bufferedwritter(new Filewritter(file));

Exception hadling:


Projects

Streams:
	-We can process collections in functional and declarative patterns
	-Simplifies data processing(looping conditions)
	-How to use streams: source -> operation -> Terminal operation

	

Callable--> When we want to return something from lambda,it throws checked exception
Runnable--> We do not want to return anything from lambda,it doesnt throws checked exception can throw unchecked one

Future<?> --> it holds the value of the lambda function which will give us in future

transient--> Not to allow the the serialization in java

Volatile Keyword:
		-To make variable not to cached in the memory for reasons so it wont cached the things and read directly from main memory
		
		-It wont work in the complex things
		
		-Just work for state saving
		
		-Useful for the flag setting / state 

Atomic Keyword:
		-To make all opearations isolated
		-Without using locks we can use AtomicInteger , etc etc
		-Useful for the the incrementing/decrementing type of operations.


JDK,JRE,JVM JIT:
	.JAVA -> compiler -> BYTECODE (platformInDependant)-> interpretation-> Machine Level Code (platformDependant)
	        javac                 JVM
	
	Java Code-> Compiler (ByteCode) -> JVM (Machine Code)->CPU -> Output
	
	JVM(Java Virtual machine):
		-It is an abstract machine(Doesnt exit physically or we can say it is just software)
		-It Has JIT (JUST IN TIME) Compiler which helps to conver Bytecode to Machine code
		JRE (Java RunTime Environment):
			-It has JVM and in built useful library like Mths,Collection framework
			-If you jave JRE u can run any Java byteCode/Compiled code on System but cant write java program
			JDK:
				-We get a programming language java
				-Compiler
				-Debugger
				
	
RuntimeException : It is for unchecked exception

Exception : Checked exceptions
 unchecked exception		
	

deepti_negi@BMC.com